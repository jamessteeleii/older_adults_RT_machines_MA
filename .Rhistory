group_by(study_code) |>
slice(1)
study_pred <- left_join(study_pred, study_labels, by = "study_code") |>
group_by(study) |>
mutate(mean_draw = mean(draw))
study_pred_labels <- study_pred |>
group_by(study, training_control) |>
mean_qi(draw)
meta_slopes <- avg_slopes(
meta_strength,
re_formula = NA,
variables = "training_control"
) |>
posterior_draws()
meta_slopes_labels <- meta_slopes |>
group_by(contrast) |>
mean_qi(draw)
meta_pred_plot <- ggplot(meta_pred, aes(x = draw, fill = training_control)) +
geom_vline(xintercept = 0, lty = "dashed") +
stat_halfeye(slab_alpha = .5, .width = 0.95) +
facet_grid(training_control~.) +
scale_fill_manual(values = c("#56B4E9", "#E69F00", "#009E73")) +
geom_text(
data = mutate_if(meta_pred_labels,
is.numeric, round, 2),
aes(
label = glue::glue("{draw} [{.lower}, {.upper}]"),
x = draw, y = 0.1
),
size = 3
) +
labs(
x = "Standardised Mean Change",
fill = "Condition",
title = "Global Grand Mean Estimates for Condition"
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank()) +
theme(title = element_text(size=8))
study_pred_plot <- ggplot(study_pred, aes(x = draw,
y = reorder(study, mean_draw),
fill = training_control)) +
geom_vline(xintercept = 0, lty = "dashed") +
# Add individual study data
geom_point(
data = data_strength,
aes(x = yi, y = study, color = training_control),
position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1),
alpha = 0.5
) +
stat_halfeye(slab_alpha = .5, position = position_dodge(width = 0.5), size = 0.25) +
scale_fill_manual(values = c("#56B4E9", "#E69F00", "#009E73")) +
scale_color_manual(values = c("#56B4E9", "#E69F00", "#009E73")) +
geom_text(
data = mutate_if(study_pred_labels,
is.numeric, round, 2),
aes(
label = glue::glue("{training_control}: {draw} [{.lower}, {.upper}]"),
x = 3, y =reorder(study, draw), group = training_control
),
size = 2, position = position_dodge(width = 0.75),
hjust = "inward"
) +
labs(
x = "Standardised Mean Change",
title = "Conditional Estimates for Condition by Study"
) +
guides(
fill = "none",
color = "none"
) +
theme_bw() +
theme(axis.title.y = element_blank()) +
theme(title = element_text(size=8))
contrast_plot <- ggplot(meta_slopes, aes(x = draw)) +
geom_vline(xintercept = 0, lty = "dashed") +
stat_halfeye(slab_alpha = .5, fill = "black") +
geom_text(
data = mutate_if(meta_slopes_labels,
is.numeric, round, 2),
aes(
label = glue::glue("{draw} [{.lower}, {.upper}]"),
x = draw, y = 0.1
),
size = 3
) +
labs(
x = "Standardised Mean Change",
title = "Contrasts Between Conditions (Training - Control)"
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank()) +
theme(title = element_text(size=8))
meta_plots <- (study_pred_plot / (meta_pred_plot + contrast_plot)) +
plot_annotation(title = "Meta-Analysis of Prior Studies Examining the Effects of Machine Based Resistance Training on Strength",
caption = "Point estimates and 95% quantile intervals reported") +
plot_layout(guides = "collect", axis_titles = "collect",
widths = c(2,1,1))  &
theme(axis.title.x = element_text(size=10),
legend.position = "bottom")
meta_plots
ggsave("meta_plots_strength.tiff", dpi = 300, w=10, h=10)
install.packages("broom.mixed")
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
install.packages("quarto")
targets::tar_make()
install.packages("bayesplot")
targets::tar_make()
targets::tar_load(model_strength)
model_strength
targets::tar_make()
targets::tar_visnetwork()
targets::tar_load(model_function)
model_function
model_function$data2
View(model_function)
View(model_strength)
length(unique(model_function$data$study_code))
`r length(unique(model_function$data$group_code))`
length(unique(model_function$data$group_code))
model_function$data$
model_function$data
model_function$data
model_function$data |> group_by(group_code) |> count(training_control)
library(tidyverse)
model_function$data |> group_by(group_code) |> count(training_control)
model_function$data |> group_by(group_code) |> slice_head() |> count(training_control)
model_function$data |> count(training_control)
model_function$data |> group_by(study_code) |> count(training_control)
model_function$data |> group_by(study_code) |> slice_head() |> ungroup |> count(training_control)
model_function$data |> group_by(study_code) |> slice_head() |> ungroup() |> count(training_control)
model_function$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
model_strength$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
model_function$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)[2,1]
model_function$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control) |> [2,1]
n_conditions_function <- model_function$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
n_conditions_strength <- model_strength$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
n_conditions_function[2,1]
n_conditions_function[1,1]
n_conditions_function[1,2]
targets::tar_load(
model_function,
tidy_model_function,
combined_function_plot,
model_strength,
tidy_model_strength,
combined_strength_plot
)
targets::tar_load(combined_function_plot)
targets::tar_load(
model_function,
tidy_model_function,
combined_function_plot,
model_strength,
tidy_model_strength,
combined_strength_plot
)
targets::tar_load(
model_function,
tidy_model_function,
combined_function_plot,
model_strength,
tidy_model_strength,
combined_strength_plot
)
targets::tar_load(combined_strength_plot)
targets::tar_load(
model_function,
tidy_model_function,
combined_function_plot,
model_strength,
tidy_model_strength,
combined_strength_plot
)
targets::tar_load(tidy_model_function)
targets::tar_load(tidy_model_strength)
targets::tar_load(
model_function,
tidy_model_function,
combined_function_plot,
model_strength,
tidy_model_strength,
combined_strength_plot
)
tidy_model_function
targets::tar_visnetwork()
targets::tar_load(
c(
model_function,
tidy_model_function,
combined_function_plot,
model_strength,
tidy_model_strength,
combined_strength_plot
)
)
n_conditions_function <- model_function$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
n_conditions_strength <- model_strength$data |> group_by(study_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
tidy_model_function <- tidy_model_function |>
mutate_if(is.numeric(), round(2))
tidy_model_function <- tidy_model_function |>
mutate_if(is.numeric, round(2))
tidy_model_function <- tidy_model_function |>
mutate_if(is.numeric, round(.,2))
tidy_model_function <- tidy_model_function |>
mutate_if(where(is.numeric), round(.,2))
tidy_model_function <- tidy_model_function |>
mutate_if(where(is.numeric), round(2))
tidy_model_function
tidy_model_function <- tidy_model_function |>
across(where(is.numeric), round(2))
tidy_model_function <- tidy_model_function |>
mutate(across(where(is.numeric), round(2)))
mutate(across(where(is.numeric), round, 2)
tidy_model_function <- tidy_model_function |>
tidy_model_function <- tidy_model_function |>
mutate(across(where(is.numeric), round, 2))
tidy_model_function
period <- 4  ## that is freq is 1/4
time <- seq(0, 10, by = 0.1)
sine_wave <- sin(2 * pi * time / period)
sine_wave
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
period <- 8  ## that is freq is 1/4
time <- seq(0, 10, by = 0.1)
sine_wave <- sin(2 * pi * time / period)
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
period <- 2  ## that is freq is 1/4
time <- seq(0, 10, by = 0.1)
sine_wave <- sin(2 * pi * time / period)
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
fft_result
?fft
fft_result |>
slice_head(n = 3)
library(dplyr)
fft_result |>
slice_head(n = 3)
Mod(fft_result) |>
slice_head(n = 3)
Mod(fft_result)
fft_result[1]
fft_result[2]
fft_result[3]
Mod(fft_result)[3]
Mod(fft_result)[1]
Mod(fft_result)[1:3]
time <- seq(0, 10, by = 1)
sine_wave <- sin(2 * pi * time / period)
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
time <- seq(0, 10, by = 0.05)
sine_wave <- sin(2 * pi * time / period)
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
0.05*5
0.05*50
Mod(fft_result)[1:50]
max(Mod(fft_result)[1:50])
max(Mod(fft_result)[1:50])/60
magnitudes<- abs(fft_result)  ## or mod()
magnitudes<- abs(fft_result)[10:50]  ## or mod()
# Find the frequency with the largest amplitude
max_index_sine <- which.max(magnitudes)
paste("magnitude value: ", magnitudes[max_index_sine] )
magnitudes[max_index_sine]
magnitudes[max_index_sine]*60
which.max(magnitudes)
max_index_sine
magnitudes
period <- 1  ## that is freq is 1/4
time <- seq(0, 10, by = 0.05)
sine_wave <- sin(2 * pi * time / period)
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
# Find the frequency with the largest amplitude
max_index_sine <- which.max(magnitudes)
paste("magnitude value: ", magnitudes[max_index_sine] )
magnitudes[max_index_sine]*60
# Find the frequency with the largest amplitude
magnitudes<- abs(fft_result)  ## or mod()
max_index_sine <- which.max(magnitudes)
paste("magnitude value: ", magnitudes[max_index_sine] )
magnitudes[max_index_sine]*60
period <- 1.5  ## that is freq is 1/4
time <- seq(0, 10, by = 0.05)
sine_wave <- sin(2 * pi * time / period)
## Apply fft function
fft_result <- fft(sine_wave)
# Visualization
par(mfrow = c(2, 1))
plot(time, sine_wave, type = "l", main = "Original Sine Wave")
plot(Mod(fft_result), type = "l", main = "FFT Magnitudes")
# Find the frequency with the largest amplitude
magnitudes<- abs(fft_result)  ## or mod()
max_index_sine <- which.max(magnitudes)
paste("magnitude value: ", magnitudes[max_index_sine] )
magnitudes[max_index_sine]*60
library(tidyverse)
library(patchwork)
library(metafor)
library(brms)
library(rstan)
library(tidybayes)
library(marginaleffects)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores() - 1)
##### Read csv as data frame into environment
data <- read_csv("data/data.csv")
# Calculate pre-post SDs from SEs
data$sd_pre <- ifelse(is.na(data$se_pre), data$sd_pre, data$se_pre * sqrt(data$n_post))
data$sd_post <- ifelse(is.na(data$se_post), data$sd_post, data$se_post * sqrt(data$n_post))
# Convert p to t (Change scores)
data$change_t_value <- replmiss(data$change_t_value, with(data, qt(change_p_value/2, df=n_post-1, lower.tail=FALSE)))
# Convert t to SE (Change scores)
data$se_change <- replmiss(data$se_change, with(data, ifelse(is.na(m_change),
(m_post - m_pre)/change_t_value, m_change/change_t_value)))
# Make SE positive (Change scores)
data$se_change <- ifelse(data$se_change < 0, data$se_change * -1, data$se_change)
# Convert CI to SE (Change scores)
data$se_change <- replmiss(data$se_change, with(data, (change_CI_upper - change_CI_lower)/3.92))
# Convert SE to SD (Change scores)
data$sd_change <- replmiss(data$sd_change, with(data, se_change * sqrt(n_post)))
# Calculate pre-post correlation coefficient for those with pre, post, and delta SDs
data$ri <- (data$sd_pre^2 + data$sd_post^2 - data$sd_change^2)/(2 * data$sd_pre * data$sd_post)
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
data$ri <- ifelse(between(data$ri,-1,1) == FALSE, NA, data$ri)
# Then we'll convert using Fishers r to z, calculate a meta-analytic point estimate, and impute that across the studies with missing correlations
data <- escalc(measure = "ZCOR", ri = ri, ni = n_post, data = data)
Meta_training_ri <- rma.mv(yi, V=vi, data=filter(data, training_control == "training"),
slab=paste(study),
random = list(~ 1 | study_code, ~ 1 | group_code, ~ 1 | es_code), method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
RobuEst_Meta_training_ri <- robust(Meta_training_ri, filter(data, training_control == "training")$study_code)
z2r_training <- psych::fisherz2r(RobuEst_Meta_training_ri$b[1])
Meta_control_ri <- rma.mv(yi, V=vi, data=filter(data, training_control == "control"),
slab=paste(study),
random = list(~ 1 | study_code, ~ 1 | group_code, ~ 1 | es_code), method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
RobuEst_Meta_control_ri <- robust(Meta_control_ri, filter(data, training_control == "control")$study)
z2r_control <- psych::fisherz2r(RobuEst_Meta_control_ri$b[1])
data <- data |>
mutate(ri = if_else(is.na(data$ri) & training_control == "training", z2r_training,
if_else(is.na(data$ri) & training_control == "control", z2r_control, ri))
) |>
# remove yi and vi
select(-yi,-vi)
# Estimate change score difference SD where only pre-post data available
data$sd_change <- replmiss(data$sd_change, with(data, sqrt(sd_pre^2 + sd_post^2 - (2*ri*sd_pre*sd_post))))
### Standardised mean difference effect size calculations
data_increase <- escalc(measure="SMCR", m1i=m_post,
m2i=m_pre, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "increase"))
data_decrease <- escalc(measure="SMCR", m1i=m_pre,
m2i=m_post, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "decrease"))
data <- rbind(data_increase, data_decrease)
View(data)
?escalc
data_increase_change <- escalc(measure="SMCR", m1i=m_post,
m2i=0, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "increase" & is.na(m_post)))
data_increase_change <- escalc(measure="SMCR", m1i=m_post,
m2i=0, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "increase" | is.na(m_post)))
filter(data, increase_decrease == "increase" | is.na(m_post))
filter(data, increase_decrease == "increase" & is.na(m_post))
data_increase_change <- escalc(measure="SMCR", m1i=m_post,
m2i=m_pre, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "increase" & is.na(m_post)) |>
mutate(m_pre = 0)
)
data_increase_change
data_increase_change
data_increase_change <- escalc(measure="SMCR", m1i=m_change,
m2i=m_pre, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "increase" & is.na(m_post)) |>
mutate(m_pre = 0)
)
data_increase_change
data_decrease_change <- escalc(measure="SMCR", m1i=m_pre,
m2i=m_change, sd1i=sd_pre, ni=n_post, ri=ri, data = filter(data, increase_decrease == "decrease" & is.na(m_post)) |>
mutate(m_pre = 0)
)
data_decrease_change
targets::tar_make()
targets::tar_make()
#| message: false
#| warning: false
#| echo: false
targets::tar_load(
c(
model_function,
tidy_model_function,
study_function_plot,
meta_function_plot,
contrast_function_plot,
model_strength,
tidy_model_strength,
study_strength_plot,
meta_strength_plot,
contrast_strength_plot
)
)
tidy_model_function <- tidy_model_function |>
mutate(across(where(is.numeric), round, 2))
#| message: false
#| warning: false
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
options(knitr.kable.NA = '')
library(tidyverse)
library(kableExtra)
library(patchwork)
#| message: false
#| warning: false
#| echo: false
targets::tar_load(
c(
model_function,
tidy_model_function,
study_function_plot,
meta_function_plot,
contrast_function_plot,
model_strength,
tidy_model_strength,
study_strength_plot,
meta_strength_plot,
contrast_strength_plot
)
)
tidy_model_function <- tidy_model_function |>
mutate(across(where(is.numeric), round, 2))
tidy_model_strength <- tidy_model_strength |>
mutate(across(where(is.numeric), round, 2))
n_conditions_function <- model_function$data |> group_by(group_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
n_conditions_strength <- model_strength$data |> group_by(group_code, training_control) |> slice_head() |> ungroup() |> count(training_control)
n_conditions_function
n_conditions_strength
model_function
#| message: false
#| warning: false
#| echo: false
#| label: fig-prisma
#| fig-width: 100%
#| fig-height: 100%
#| fig-cap: PRISMA Flow chart for screening process
knitr::include_graphics(here("plots/PRISMA.png"))
#| message: false
#| warning: false
#| echo: false
#| label: fig-prisma
#| fig-width: 100%
#| fig-height: 100%
#| fig-cap: PRISMA Flow chart for screening process
knitr::include_graphics(here::here("plots/PRISMA.png"))
#| message: false
#| warning: false
#| echo: false
#| label: fig-prisma
#| fig-width: 100
#| fig-height: 100
#| fig-cap: PRISMA Flow chart for screening process
knitr::include_graphics(here::here("plots/PRISMA.png"))
#| message: false
#| warning: false
#| echo: false
#| label: fig-prisma
#| fig-cap: PRISMA Flow chart for screening process
knitr::include_graphics(here::here("plots/PRISMA.png"))
